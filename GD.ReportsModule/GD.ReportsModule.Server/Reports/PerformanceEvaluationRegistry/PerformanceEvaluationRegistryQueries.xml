<?xml version="1.0" encoding="utf-8"?>
<queries>
  <query key="IOGV">
    <default><![CDATA[WITH QuestionLastTable AS
(
WITH Question AS
(
WITH Qu AS
(
WITH Q AS
(
SELECT  rq.id AS Qid,
    b.name AS BUName,
    c.name AS QuestionName,
    cl.code AS SectionCode,
    cl.name AS SectionName,
    c.fullcode AS QFullCode,
    r.regdate_docflow_sungero AS RegDate,
  
    SUM(COUNT (rq.id) FILTER (WHERE r.regdate_docflow_sungero >= @LQStartDate AND r.regdate_docflow_sungero <= @LQEndDate)) OVER() AS LQQSum,
    SUM(COUNT (rq.id) FILTER (WHERE r.regdate_docflow_sungero >= @StartDate AND r.regdate_docflow_sungero <= @EndDate)) OVER() AS QSum

FROM gd_citizen_reqquestions rq

LEFT JOIN sungero_content_edoc r ON r.id = rq.edoc
LEFT JOIN gd_citizen_classifierbase c ON c.id = rq.question
LEFT JOIN sungero_core_recipient b ON r.businessunit_docflow_sungero = b.id
LEFT JOIN gd_citizen_classifierbase cl ON c.section = cl.id

WHERE
  r.regdate_docflow_sungero >= @LQStartDate AND r.regdate_docflow_sungero <= @EndDate AND
	CASE
		WHEN @AllBusinessUnits = TRUE THEN b.id IN (SELECT id FROM sungero_core_recipient
										                            WHERE discriminator::citext = @BusinessUnitTypeGuid AND isiogvto_main_gd = TRUE)
		WHEN @AllBusinessUnits = FALSE THEN b.id = @BusinessUnitId
	END

GROUP BY Qid, BUName, QuestionName, SectionCode, SectionName, QFullCode, RegDate
)

SELECT  BUName, QuestionName, SectionCode, SectionName, QFullCode,

    COUNT (Qid) FILTER (WHERE RegDate >= @LQStartDate AND RegDate <= @LQEndDate)
      AS LQQCount,
    
    CASE WHEN LQQSum > 0
    THEN COUNT (Qid) FILTER (WHERE RegDate >= @LQStartDate AND RegDate <= @LQEndDate) / LQQSum * 100
    ELSE NULL END AS LQQShare,

    COUNT (Qid) FILTER (WHERE RegDate >= @StartDate AND RegDate <= @EndDate)
      AS QCount,
      
    CASE WHEN QSum > 0
    THEN COUNT (Qid) FILTER (WHERE RegDate >= @StartDate AND RegDate <= @EndDate) / QSum * 100
    ELSE NULL END AS QShare

FROM Q

GROUP BY BUName, QuestionName, SectionCode, SectionName, QFullCode, LQQSum, QSum
)

SELECT	*,
		CASE WHEN LQQShare > 0
		THEN LQQShare - AVG(LQQShare) FILTER (WHERE LQQShare > 0) OVER()
		ELSE NULL END AS LQQShareChange,
	
		CASE WHEN QShare > 0
		THEN QShare - AVG(QShare) FILTER (WHERE QShare > 0) OVER()
		ELSE NULL END AS QShareChange,
		
		LQQCount / (District.Size / 10000 :: real) AS LQPopActivity,
		QCount / (District.Size / 10000 :: real) AS PopActivity,
		
		SUM (LQQCount) OVER (PARTITION BY BUName, SectionCode) AS LQQSectionCount,
		SUM (QCount) OVER (PARTITION BY BUName, SectionCode) AS QSectionCount,
		
		SUM (LQQShare) OVER (PARTITION BY BUName, SectionCode) AS LQQSectionShare,
		SUM (QShare) OVER (PARTITION BY BUName, SectionCode) AS QSectionShare,
	
		SUM (LQQCount) OVER (PARTITION BY BUName, SectionCode) / (District.Size / 10000 :: real) AS LQSectionPopActivity,
		SUM (QCount) OVER (PARTITION BY BUName, SectionCode) / (District.Size / 10000 :: real) AS SectionPopActivity,
	
		SUM (LQQCount) OVER (PARTITION BY BUName) AS LQBUQCount,
		SUM (QCount) OVER (PARTITION BY BUName) AS BUQCount,
	
		SUM (LQQShare) OVER (PARTITION BY BUName) AS LQBUShare,
		SUM (QShare) OVER (PARTITION BY BUName) AS BUShare

FROM 	Qu,
	(SELECT SUM(size) AS Size
	FROM public.sc_citize1_district
	WHERE istoaddivision = true) District
GROUP BY BUName, QuestionName, SectionCode, SectionName, QFullCode, LQQCount, QCount, LQQShare, QShare, Size
)

SELECT *,
		CASE WHEN LQQCount > 0
		THEN LQPopActivity - AVG(LQPopActivity) FILTER (WHERE LQPopActivity > 0) OVER()
		ELSE NULL END AS LQPopActivityChange,
		
		CASE WHEN QCount > 0
		THEN PopActivity - AVG(PopActivity) FILTER (WHERE PopActivity > 0) OVER()
		ELSE NULL END AS PopActivityChange,
		
		CASE WHEN LQQSectionShare > 0
		THEN LQQSectionShare - 100 / SectionsByBU.LQSCount :: real
		ELSE NULL END AS LQQSectionShareChange,
		
		CASE WHEN QSectionShare > 0
		THEN QSectionShare - 100 / SectionsByBU.SCount :: real
		ELSE NULL END AS QSectionShareChange,
		
		CASE WHEN LQBUShare > 0
		THEN LQBUShare - 100 / BU.LQBUsCount :: real
		ELSE NULL END AS LQQBUShareChange,
		
		CASE WHEN BUShare > 0
		THEN BUShare - 100 / BU.BUsCount :: real
		ELSE NULL END AS QBUShareChange
		
FROM Question,

	(SELECT	DISTINCT
      COUNT (*) FILTER (WHERE LQQSectionCount > 0) OVER () AS LQSCount,
      COUNT (*) FILTER (WHERE QSectionCount > 0) OVER () AS SCount
	FROM Question
	GROUP BY BUName, SectionCode, LQQSectionCount, QSectionCount) SectionsByBU,
	
	(SELECT	DISTINCT
      COUNT (*) FILTER (WHERE LQBUQCount > 0) OVER () AS LQBUsCount,
      COUNT (*) FILTER (WHERE BUQCount > 0) OVER () AS BUsCount
	FROM Question
	GROUP BY BUName, LQBUQCount, BUQCount) BU

GROUP BY 	BUName, QuestionName, SectionCode, SectionName, QFullCode, LQQCount, QCount, LQQShare, QShare, Size,
			LQQShareChange, QShareChange, LQPopActivity, PopActivity, LQQSectioncount, QSectioncount, LQQSectionShare, QSectionShare,
			LQSCount, SCount, LQSectionPopActivity, SectionPopActivity,
			LQBUQCount, BUQCount, LQBUShare, BUShare, LQBUsCount, BUsCount
			
ORDER BY BUName, QFullCode ASC
)

SELECT *,

		CASE WHEN LQSectionPopActivity > 0
 		THEN LQSectionPopActivity - SectionPopActivityByCode.AvgLQSectionPopActivity
 		ELSE NULL END AS LQSectionPopActivityChange,

 		CASE WHEN SectionPopActivity > 0
 		THEN SectionPopActivity - SectionPopActivityByCode.AvgSectionPopActivity
 		ELSE NULL END AS SectionPopActivityChange,

		ROUND(AVG(LQQShareChange) FILTER(WHERE LQQShareChange IS NOT NULL) OVER()::numeric, 10) AS AvgLQQShareChange,
		ROUND(AVG(QShareChange) FILTER(WHERE QShareChange IS NOT NULL) OVER()::numeric, 10) AS AvgQShareChange,
		ROUND(AVG(LQPopActivityChange) FILTER(WHERE LQPopActivityChange IS NOT NULL) OVER()::numeric, 10) AS AvgLQPopActivityChange,
		ROUND(AVG(PopActivityChange) FILTER(WHERE PopActivityChange IS NOT NULL) OVER()::numeric, 10) AS AvgPopActivityChange
		
FROM QuestionLastTable,
		
		(SELECT DISTINCT
		 	AVG (LQSectionPopActivity) FILTER (WHERE LQSectionPopActivity > 0) OVER () AS AvgLQSectionPopActivity,
		 	AVG (SectionPopActivity) FILTER (WHERE SectionPopActivity > 0) OVER () AS AvgSectionPopActivity
		FROM QuestionLastTable
		GROUP BY BUName, SectionCode, LQSectionPopActivity, SectionPopActivity) SectionPopActivityByCode
		
GROUP BY 	BUName, QuestionName, SectionCode, SectionName, QFullCode, LQQCount, QCount, LQQShare, QShare, Size,
			LQQShareChange, QShareChange, LQPopActivity, PopActivity, LQQSectioncount, QSectioncount, LQQSectionShare, QSectionShare,
			LQSectionPopActivity, SectionPopActivity, LQSCount, SCount, LQBUQCount, BUQCount, LQBUShare, BUShare, LQBUsCount, BUsCount,
			LQPopActivityChange, PopActivityChange, LQQsectionShareChange, QSectionShareChange, LQQBUshareChange, QBUShareChange,
			AvgLQSectionPopActivity, AvgSectionPopActivity
			
ORDER BY BUName, QFullCode ASC]]></default>
  </query>
</queries>